* JOrg
** Repo Structure
   - jorg-capture.el :: JOrg capture related functionality

   - jorg-common.el :: functionality common across the other JOrg modules

   - jorg.el :: main el file required by elisp packaging

   - jorg-pkg.el :: elisp packaging

   - jorg-project.el :: JOrg project related functionality

   - README.md :: generated from README.org

   - README.org :: This file, because we like ORG

   - tests :: jorg unit tests

** Installation
*** Get JOrg
    Get JOrg from github
    1. Using CLI: ~git clone git@github.com:jasonchurch/jorg.git~
    2. Using Browser: https://github.com/jasonchurch/jorg. Click clone or download and select Download Zip.
    3. Some day we'll look at melpa...

*** Make Emacs aware of JOrg
    In your emacs config file, .emacs or alternative locations.
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "<path to JOrg folder")
      (require 'jorg)
    #+END_SRC

*** Customizations
    The following are common JOrg customizations that can be added to
    your local emacs config.

    #+BEGIN_SRC emacs-lisp
      (setq jorg-capture-key-main "j")  ;;To trigger capture menu for JORG: Cc c j
      (setq jorg-project-base-dir "/home/red0ck33g/org/2017/projects")
      (setq jorg-capture-project-task-target "TASKS")
      (setq jorg-user-name "Jason Church")
      (setq jorg-user-email "jasonchurch@edeveloper.ca")
      (global-set-key (kbd "C-c j s") 'jorg-switch-project)
    #+END_SRC

** Usage
   Mostly you use JOrg to manage its project files, [[*What is a JOrg Project File?][What is a JOrg
   Project File?]], the same way you would any other org file.  The
   primary interface into JOrg are around capturing projects and their
   Updates, Todos and Reference headings via ORG's capture system and
   switching between JOrg Projects.

*** Jorg Capture
    We'll assume you used the standard, default configuration, see
    ~jorg-capture-key-main~ variable to change the default letter =j=.

    - Cc c j :: JOrg Capture Menu

*** Common User/Interactive Functions
    These are functions meant to be used interactively by the user
    either by <Alt-x> <function-name> or a keyboard shortcut.

    The following are the available functions. Shortcuts have been
    left to the users to setup, please add shortcuts to your local
    emacs config for any of these commands.  Simply substitute the
    keys and function you wish to use in the following example:

    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c j s") 'jorg-switch-project)
    #+END_SRC

    - jorg-switch-project :: switch between project files using a
         popup menu. The items are sorted by last modified, with
         current buffer, if a JOrg project, being at the top.

** What is a JOrg Project File?
   JORG's Project - an org file that represents a single project:
   movies I like; books to read;become a rocket scientest;build shiny
   rocket ship; etc.  Each file consists of a single top level PROJECT
   TO DO Heading with subheadings:

   - UPDATES to help keep track of progress or key info either for
   your own sake (I have a poor memory) or a means to have an easy
   update on hand to provide to interested parties.

   - TASKS for related NEXT ACTIONS (if your a GTD fan) or project
   related TODOs.

   - RERERENCE a location for anything else related to your project:
   snippets of info, images/diagrams, notes, important links, etc.

   Example of Project Structure using perhaps a trivial example, but
   some of us need all the organization we can get! While this example
   shows the basic structure of a JOrg Project, there are more
   attributes like Title, Author, etc and the project and other
   headings may have various properties.

   #+BEGIN_EXAMPLE
   * PROJECT [#A] Read ELisp Manual
   ** UPDATES
      - [2017-09-08] Found manual online, but its more cool reading it inside Emacs!
   ** TASKS
   *** NEXT Read Lisp Data Types
   ** REFERENCE
   *** NOTES
   **** 1.2 Lisp History
   ***** MacLisp created in the 1960s
   ***** Common Lisp, the result of many MacLisp decendants finally getting together
         - Emacs has a cl-lib which implements some common Lisp.
   #+END_EXAMPLE
